~strings
EQUS {[first violins], [second violins]}
EQUS {[violas], [cellos], [bass]}

~woodwind
EQUS {[piccolos], [flutes], [clarinets], [oboes]}

~odd_numbers
EQUB {1, 3, 5, 7, 9, 11, 13, 15, 17, 19}
EQUB {21, 23, 25, 27, 29, 31, 33, 35, 37, 39}
EQUD {0x292b2d2f, 0x31333537}

~pointers
EQUP {&[.jump1], &[.jump2], &[.jump3], &[.jump4]}

~segments
EQUP {&[~ strings], &[~ woodwind]}
EQUP {&[~ odd_numbers], &[~ pointers]}

._init
% Process each data segment listed in ~segments
reg/load     P0, (&[. segments])

.loop
reg/load     P1, (P0)
reg/jmpeq    &[.stop], P1, NULL

% Now read each item from the selected data segment
reg/load     P2, (P1)

.loop2
reg/load     P3, (P2)
reg/jmpeq    &[.next], P3, NULL
obj/dump     P3

% This might be a code pointer, so try calling it
% If it isn't a code pointer, we discard the error
error/jmp    &[.trap]
local/jsr    P3

.trap
error/clr
error/jmp
local/jmp    &[.loop2]

.next
reg/clr P2
local/jmp    &[ loop]

.stop
local/rtn

.jump1
obj/dump     [jump1 called]
local/rtn

.jump2
obj/dump     [jump2 called]
local/rtn

.jump3
obj/dump     [jump3 called]
local/rtn

.jump4
obj/dump     [jump4 called]
local/rtn